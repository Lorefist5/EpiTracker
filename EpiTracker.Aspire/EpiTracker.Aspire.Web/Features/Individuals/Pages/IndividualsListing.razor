@page "/individuals"
@using EpiTracker.Aspire.Web.Common
@using EpiTracker.Aspire.Web.Features.Individuals.Services
@using EpiTracker.Aspire.Web.Features.Individuals.ViewModels
@using EpiTracker.Aspire.Web.Features.Individuals.components
@using EpiTracker.Domain.Features.Individuals.Dtos
@using Microsoft.AspNetCore.Components.Web
@using MudBlazor
@inject IIndividualApi IndividualsApi
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<PageTitle>Individuals</PageTitle>

<MudContainer>
    <MudGrid>
        <!-- Create Individual Button -->
        <MudItem xs="12" class="d-flex justify-content-end mb-2">
            <MudButton Style="margin:10px;" Color="Color.Success" Variant="Variant.Filled" OnClick="CreateIndividual" StartIcon="@Icons.Material.Filled.Add">
                Create Individual
            </MudButton>
        </MudItem>

        <!-- Search Bar -->
        <MudItem xs="12">
            <MudTextField @bind-Value="_searchString" Placeholder="Search Individuals..." Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
        </MudItem>

        <!-- DataGrid Section -->
        <MudItem xs="12" md="7">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h5">Individuals List</MudText>

                    <!-- Create DataGrid -->
                    <MudDataGrid T="IndividualDetailsViewModel" Hover="true" Bordered="true" Items="@filteredIndividuals"
                                 SortMode="SortMode.Multiple" QuickFilter="@_quickFilter" Loading="loading" RowClick="OnRowClick">
                        <Columns>
                            <PropertyColumn Property="x => x.Name" Title="Name" />
                            <PropertyColumn Property="x => x.Age" Title="Age" />
                            <PropertyColumn Property="x => x.DateDiagnosed" Title="Date Diagnosed" />
                        </Columns>
                        <PagerContent>
                            <MudDataGridPager T="GetIndividualDto" />
                        </PagerContent>
                    </MudDataGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Info Card Section -->
        <MudItem xs="12" md="5">
            <div class="@((selectedIndividual != null) ? "fade-in" : "")">
                @if (selectedIndividual != null)
                {
                    <IndividualInfoCard Model="selectedIndividual">
                        <MudItem xs="12" sm="4">
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => EditIndividual(selectedIndividual.Id)" FullWidth="true">
                                <MudIcon Icon="@Icons.Material.Filled.Edit" /> Edit
                            </MudButton>
                        </MudItem>
                        <MudItem xs="12" sm="4">
                            <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="() => ConfirmDelete(selectedIndividual.Id)" FullWidth="true">
                                <MudIcon Icon="@Icons.Material.Filled.Delete" /> Delete
                            </MudButton>
                        </MudItem>
                        <MudItem xs="12" sm="4">
                            <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="() => ViewIndividual(selectedIndividual.Id)" FullWidth="true">
                                <MudIcon Icon="@Icons.Material.Filled.Visibility" /> View
                            </MudButton>
                        </MudItem>
                    </IndividualInfoCard>
                }
                else
                {
                    <MudCard Class="mb-4" Elevation="4">
                        <MudCardContent>
                            <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Secondary">Select an individual to show more information</MudText>
                        </MudCardContent>
                    </MudCard>
                }
            </div>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<IndividualDetailsViewModel> individuals = new();
    private List<IndividualDetailsViewModel> filteredIndividuals = new(); // Filtered list for search
    private IndividualDetailsViewModel? selectedIndividual;
    private string _searchString = string.Empty; // Search query
    private bool loading = true;

    // Custom filter function based on search query
    private Func<IndividualDetailsViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Age.ToString().Contains(_searchString))
            return true;

        if (x.DateDiagnosed.HasValue && x.DateDiagnosed.Value.ToString("MMMM dd, yyyy").Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch the individuals from the API
            var getIndividualDtosFetched = await IndividualsApi.GetIndividualsAsync();
            individuals = getIndividualDtosFetched.Select(IndividualDetailsViewModel.FromGetIndividualDto).ToList();
            filteredIndividuals = individuals; // Initially, show all individuals
        }
        finally
        {
            loading = false; // Stop loading indicator
        }
    }

    private void CreateIndividual() => 
        NavigationManager.NavigateTo("/individuals/create");
    

    private void OnRowClick(DataGridRowClickEventArgs<IndividualDetailsViewModel> args)
    {
        selectedIndividual = args.Item; // Set the selected individual on row click
    }

    // Confirm Delete dialog logic
    private async Task ConfirmDelete(int individualId)
    {
        var parameters = new DialogParameters { ["ContentText"] = "Are you sure you want to delete this individual?", ["ButtonText"] = "Yes" };

        var dialog = DialogService.Show<ConfirmationDialog>("Delete Confirmation", parameters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await DeleteIndividual(individualId);
        }
    }

    // Delete logic
    private async Task DeleteIndividual(int individualId)
    {
        await IndividualsApi.DeleteIndividualByIdAsync(individualId);
        var fetchedIndividual = individuals.FirstOrDefault(ind => ind.Id == individualId);
        if (fetchedIndividual == null)
        {
            Snackbar.Add("Individual was not found in the system.", Severity.Error);
            return;
        }

        individuals.Remove(fetchedIndividual);
        filteredIndividuals = individuals; // Update filtered list
        Snackbar.Add("Individual was deleted successfully!", Severity.Success);
        selectedIndividual = null; // Clear the selected individual after deletion
    }

    private void EditIndividual(int individualId) => 
        NavigationManager.NavigateTo($"/individuals/edit/{individualId}");
    


    private void ViewIndividual(int individualId) => 
    NavigationManager.NavigateTo($"/individuals/view/{individualId}");
    
}
